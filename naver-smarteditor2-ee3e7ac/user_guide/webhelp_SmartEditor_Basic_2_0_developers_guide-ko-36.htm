<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0014)about:internet -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
 <meta name="generator" content="Adobe RoboHelp 10" />
<meta name="OriginalFile" content="webhelp_SmartEditor_Basic_2.0_developers_guide-ko.docx" />
<title>webhelp_SmartEditor_Basic_2.0_developers_guide-ko-36</title>
<link rel="stylesheet" href="default.css" type="text/css" />
<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
-->
</style>
<script type="text/javascript" language="javascript1.2" src="whmsg.js" charset="utf-8"></script>
<script type="text/javascript" language="javascript" src="whver.js" charset="utf-8"></script>
<script type="text/javascript" language="javascript1.2" src="whutils.js" charset="utf-8"></script>
<script type="text/javascript" language="javascript1.2" src="whproxy.js" charset="utf-8"></script>
<script type="text/javascript" language="javascript1.2" src="whlang.js" charset="utf-8"></script>
<script type="text/javascript" language="javascript1.2" src="whtopic.js" charset="utf-8"></script>

</head>
<body><script type="text/javascript" language="javascript1.2">//<![CDATA[
<!--
if (window.gbWhTopic)
{
	var strUrl = document.location.href;
	var bc = 0;
	var n = strUrl.toLowerCase().indexOf("bc-");
	if(n != -1)
	{
		document.location.href = strUrl.substring(0, n);
		bc = strUrl.substring(n+3);
	}

	if (window.addTocInfo)
	{
	addTocInfo("기능추가및변경하기\n새로운 기능 추가\n플러그인 제작");

	}
	if (window.writeBtnStyle)
		writeBtnStyle();

	if (window.writeIntopicBar)
		writeIntopicBar(0);

	
	document.write("<p style=\"text-align:left\"> ");
AddMasterBreadcrumbs("index.htm", "", "&gt;", "홈", "webhelp_SmartEditor_Basic_2_0_developers_guide-ko-1.htm");
document.write("<a href=\"webhelp_SmartEditor_Basic_2_0_developers_guide-ko-29.htm\">기능추가및변경하기<\/a> &gt; <a href=\"webhelp_SmartEditor_Basic_2_0_developers_guide-ko-33.htm\">새로운 기능 추가<\/a> &gt; 플러그인 제작<\/p>");

}
else
	if (window.gbIE4)
		document.location.reload();

onLoadHandler = function()
{
  if (window.setRelStartPage)
	{
	setTimeout("setRelStartPage('index.htm');", 1)

    setTimeout("UpdateBreadCrumbsMarker();", 1);
	}
}

if (window.addEventListener){  
	window.addEventListener('load', onLoadHandler, false);   
} else if (window.attachEvent){  
	window.attachEvent('onload', onLoadHandler);  
}

function onSetStartPage()
{
  autoSync(1);
  sendSyncInfo();
  sendAveInfoOut();
}
//-->
//]]></script>
<script type="text/javascript" src="./ehlpdhtm.js" language="JavaScript1.2"></script>

<h3>플러그인 제작</h3>
<p class="nNormal">플러그인을 제작하려면 핸들러를 추가해야 한다. 여기에서는 Husky 프레임워크 기본 핸들러와 사용자 핸들러를 추가하는 방법을 설명한다.</p>
<h4>Husky 프레임워크 기본 핸들러 추가</h4>
<p class="nNormal">"<a href="webhelp_SmartEditor_Basic_2_0_developers_guide-ko-29.htm#파일과_클래스_명명_규칙">파일과 클래스 명명 규칙</a>"에서 설명한 규칙에 따라 플러그인 파일을 생성하고 다음과 같이 기본 핸들러를 추가한다.</p>
<ol><li class="nListBuld1">$init
<p class="nNormal_d1">플러그인을 생성하면서 동시에 초기화를 수행하려면 $init 함수에서 초기화를 수행한다.</p>
<p class="nCode_d2"><span class="nCodeHighlight">$init</span> : function(elAppContainer){</p>
<p class="nCode_d2">&#160;&#160;&#160; this._assignHTMLObjects(elAppContainer);</p>
<p class="nCode_d2">},</p></li>
<li class="nListBuld1">_assignHTMLElements
<p class="nNormal_d1">지속적으로 사용할 HTML 요소는 _assignHTMLElements 함수에서 초기화한다. 단, 성능에 많은 영향을 준다면 필요한 시점에 HTML 요소를 초기화하여 사용하는 것이 좋다.</p>
<p class="nNormal_d1">다음은 툴바에 추가한 버튼을 클릭하면 보여줄 div 레이어를 초기화하는 코드이다.</p>
<p class="nCode_d2"><span class="nCodeHighlight">_assignHTMLObjects</span> : function(elAppContainer){</p>
<p class="nCode_d2">&#160;&#160;&#160; this.oDropdownLayer =</p>
<p class="nCode_d2">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; cssquery.getSingle("DIV.husky_seditor_TimeStamper_layer", elAppContainer);</p>
<p class="nCode_d2">},</p></li>
<li class="nListBuld1">$ON_MSG_APP_READY
<p class="nNormal_d1">모든 플러그인이 등록된 이후에 초기화를 수행해야 하는 경우에는 $ON_ MSG_APP_READY에서 처리한다. 이 메시지는 에디터 초기화에 영향을 주므로 HTML 요소를 초기화하는 작업과 HTML 요소에 이벤트를 연결하는 작업만 수행한다.</p>
<p class="nNormal_d1">다음은 버튼에 이벤트를 연결하는 코드이다. 이때 REGISTER_UI_EVENT에 전달되는 3개의 매개변수는 각각 '추가한 버튼의 클래스 이름에서 husky_seditor_ui_를 제외한 부분', '발생할 이벤트', '이벤트가 발생하면 호출될 핸들러'를 의미한다.</p>
<p class="nCode_d2"><span class="nCodeHighlight">$ON_MSG_APP_READY</span> : function() {</p>
<p class="nCode_d2">&#160;&#160;&#160; <span class="nCodeHighlight">this.oApp.exec('REGISTER_UI_EVENT'</span>, ['TimeStamper', 'click',</p>
<p class="nCode_d2">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; 'SE_TOGGLE_TIMESTAMPER_LAYER']);</p>
<p class="nCode_d2">},</p></li></ol>
<h4>사용자 핸들러 추가</h4>
<p class="nNormal">Husky 플러그인에서 제공하는 핸들러 외에 사용자 핸들러도 생성해야 한다. 핸들러 이름 앞에는 $ON_을 붙여야 하며, 핸들러 이름 작성 시 권장 사항은 다음과 같다.</p>
<ol><li class="nListBuld1">대문자로 작성한다.</li>
<li class="nListBuld1">그대로 전달되는 브라우저 이벤트에 대한 핸들러의 이름은 다음과 같이 EVENT_로 시작한다.
<p class="nCode_d2">$ON_EVENT_EDITING_AREA_KEYUP</p></li>
<li class="nListBuld1">반드시 특정 작업을 수행해야 하는 것이 아니라 특정 이벤트가 발생했음을 통지받는 핸들러의 이름은 다음과 같이 MSG_로 시작한다.
<p class="nCode_d2">$ON_MSG_EDITOR_READY</p></li></ol>
<p class="nNormal">앞에서 TimeStamper 플러그인 예제에 툴바 버튼에 클릭 이벤트를 추가하고, 버튼을 클릭하면 호출될 핸들러를 선언했다. 여기에서는 호출될 핸들러인 SE_TOGGLE_TIMESTAMPER_LAYER를 작성한다. 함수 안에는 버튼을 클릭하면 수행할 동작을 작성한다.</p>
<p class="nCode">$ON_SE_TOGGLE_TIMESTAMPER_LAYER : function(){</p>
<p class="nCode">&#160;&#160;&#160; this.oApp.exec("TOGGLE_TOOLBAR_ACTIVE_LAYER", [this.oDropdownLayer]);</p>
<p class="nCode">}</p>
<p class="nNormal">SE_TOGGLE_TIMESTAMPER_LAYER 핸들러 함수 안에서 호출하는 TOGGLE_TOOLBAR_ACTIVE_LAYER 핸들러는 에디터에서 제공하는 핸들러로, 두 번째 매개변수인 this.oDropdownLayer를 액티브 레이어 그룹에 추가하고 툴바 아래에 다음과 같은 레이어를 생성한다.</p>
<p class="nNormal"><img border="0" width="578" height="81" src="webhelp_SmartEditor_Basic_2.0_developers_guide-ko.files/image083.png" alt="" /></p>
<p class="Caption">그림 40 액티브 레이어를 추가한 에디터 화면</p>
<p class="nNormal">이제 Insert Date 버튼을 누르면 본문에 시간이 삽입되는 함수를 작성한다. 함수의 이름은 $ON_PASTE_NOW_DATE라고 하자. 이 함수를 작성하는 방법은 다음과 같다.</p>
<ol><li class="nListNumd1">레이어 안의 버튼을 _assignHTMLObjects에서 초기화한다.</li>
<li class="nListNumd1">$ON_MSG_APP_READY에서 초기화한 버튼에 이벤트를 할당한다.
<p class="nCode_d2">this.oApp.registerBrowserEvent(this.oInputButton, 'click','PASTE_NOW_DATE');</p></li>
<li class="nListNumd1">PASTE_NOW_DATE 핸들러를 작성한다. 이 핸들러 안에서는 에디터에서 제공하는 PASTE_HTML이라는 핸들러를 호출한다. PASTE_HTML은 본문에 콘텐츠를 넣을 때 사용되는 핸들러이다. 두 번째 매개변수로 본문에 삽입할 내용을 입력한다.
<p class="nCode_d2">$ON_PASTE_NOW_DATE : function(){</p>
<p class="nCode_d2">&#160;&#160;&#160; this.oApp.exec("PASTE_HTML", [new Date()]);</p>
<p class="nCode_d2">}</p></li></ol>
<p class="nNormal">다음은 플러그인을 생성을 완료하고, 버튼을 클릭하여 본문에 현재 시각을 넣은 화면이다.</p>
<p class="nNormal"><img border="0" width="584" height="81" src="webhelp_SmartEditor_Basic_2.0_developers_guide-ko.files/image084.png" alt="" /></p>
<p class="Caption">그림 41 TimeStamper 실행한 에디터 화면</p>
<h4>SE_TimeStamper 플러그인 전체 코드</h4>
<p class="nNormal">지금까지 툴바에 새로은 기능을 추가하는 방법을 간단하게 알아보았다. hp_SE_TimeStamper.js의 전체 코드는 다음과 같다.</p>
<p class="nCode">nhn.husky.SE_TimeStamper = jindo.$Class({</p>
<p class="nCode">&#160;&#160;&#160; name : "SE_TimeStamper",</p>
<p class="nCode">&#160;&#160;&#160; $init : function(elAppContainer){</p>
<p class="nCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160; this._assignHTMLObjects(elAppContainer);</p>
<p class="nCode">&#160;&#160;&#160; },</p>
<p class="nCode">&#160;</p>
<p class="nCode">&#160;&#160;&#160; _assignHTMLObjects : function(elAppContainer){</p>
<p class="nCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160; this.oDropdownLayer =</p>
<p class="nCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; cssquery.getSingle("DIV.husky_seditor_TimeStamper_layer", elAppContainer);</p>
<p class="nCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160; //div 레이어안에 있는 input button을 cssquery로 찾는 부분.</p>
<p class="nCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160; this.oInputButton = cssquery.getSingle(".se_button_time", elAppContainer);</p>
<p class="nCode">&#160;&#160;&#160; },</p>
<p class="nCode">&#160;</p>
<p class="nCode">&#160;&#160;&#160; $ON_MSG_APP_READY : function(){</p>
<p class="nCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160; this.oApp.exec("REGISTER_UI_EVENT",</p>
<p class="nCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; ["TimeStamper", "click", "SE_TOGGLE_TIMESTAMPER_LAYER"]);</p>
<p class="nCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160; //input button에 click 이벤트를 할당.</p>
<p class="nCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160; this.oApp.registerBrowserEvent(this.oInputButton, 'click','PASTE_NOW_DATE');</p>
<p class="nCode">&#160;&#160;&#160; },</p>
<p class="nCode">&#160;</p>
<p class="nCode">&#160;&#160;&#160; $ON_SE_TOGGLE_TIMESTAMPER_LAYER : function(){</p>
<p class="nCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160; this.oApp.exec("TOGGLE_TOOLBAR_ACTIVE_LAYER", [this.oDropdownLayer]);</p>
<p class="nCode">&#160;&#160;&#160; },</p>
<p class="nCode">&#160;</p>
<p class="nCode">&#160;&#160;&#160; $ON_PASTE_NOW_DATE : function(){</p>
<p class="nCode">&#160;&#160;&#160;&#160;&#160;&#160;&#160; this.oApp.exec("PASTE_HTML", [new Date()]);</p>
<p class="nCode">&#160;&#160;&#160; }</p>
<p class="nCode">});</p>
<script type="text/javascript" language="javascript1.2">//<![CDATA[
<!--
if (window.writeIntopicBar)
	writeIntopicBar(0);


highlightSearch();
//-->
//]]></script>
</body>
</html>
